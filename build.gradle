plugins {
        id 'java'
        id 'fabric-loom' version '1.10-SNAPSHOT'
        id 'maven-publish'
        id 'com.gradleup.shadow' version '9.0.0-beta4'
        id 'com.github.gmazzo.buildconfig' version '5.5.1'
}


repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

version = project.mod_version
group = project.maven_group

base {
        archivesName = project.archives_base_name
}

loom {
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    compileOnly "org.jetbrains:annotations:${project.jetbrains_version}"
    compileOnly group: 'org.ow2.asm', name: 'asm-tree', version: project.asm_version

    compileOnly "org.projectlombok:lombok:${project.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"

    testCompileOnly "org.projectlombok:lombok:${project.lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${project.lombok_version}"

    implementation "org.reflections:reflections:${project.reflections_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

buildConfig {
    className("Metadata")
    packageName(group)

    buildConfigField(String, 'MOD_NAME', project.mod_name)
    buildConfigField(String, 'MOD_ID', project.modid)
    buildConfigField(String, 'MOD_VERSION', project.mod_version)
    buildConfigField(String, 'MINECRAFT_VERSION', project.minecraft_version)
}
